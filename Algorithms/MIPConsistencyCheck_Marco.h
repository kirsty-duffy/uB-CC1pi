// MIP Consistency Check copied from Marco's code on 25th Jan 2018
// This is not intended to be the final MIP consistency cut, just a placeholder
// until we can put in something more concrete.

// It uses a hardcoded array for the cut in length-dqdx space. I have copied
// this from Marco's github (fcl file UBXSec/job/muoncandidatefinder.fcl) but
// put the hardcoded array directly in the header file

// -- Kirsty Duffy, Fermilab, 25/01/2018

// Check if we've already defined a MIP consistency header file (don't redefine)
#ifndef MIPCONSISTENCY_H
#define MIPCONSISTENCY_H

// art includes
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Persistency/Common/FindManyP.h"
#include "canvas/Utilities/InputTag.h"

// larsoft includes
#include "lardataobj/RecoBase/Track.h"
#include "lardataobj/AnalysisBase/Calorimetry.h"

// standard C++ includes
#include <iostream>

// dqdx cut values, hardcoded and copied from Marco's fcl file
const std::vector<double> _dqdx_cutvals = {92200, 91700, 91200, 90700, 90250, 89800, 89350, 88900, 88500, 88100, 87700, 87300, 86900, 86550, 86200, 85850, 85500, 85150, 84800, 84500, 84200, 83850, 83550, 83250, 82950, 82650, 82400, 82100, 81850, 81550, 81300, 81050, 80800, 80550, 80300, 80050, 79800, 79600, 79350, 79150, 78900, 78700, 78450, 78250, 78050, 77850, 77650, 77450, 77250, 77050, 76850, 76650, 76500, 76300, 76100, 75950, 75750, 75600, 75400, 75250, 75100, 74900, 74750, 74600, 74450, 74300, 74150, 74000, 73850, 73700, 73550, 73400, 73250, 73100, 73000, 72850, 72700, 72600, 72450, 72300, 72200, 72050, 71950, 71800, 71700, 71600, 71450, 71350, 71250, 71100, 71000, 70900, 70800, 70700, 70550, 70450, 70350, 70250, 70150, 70050, 69950, 69850, 69750, 69650, 69550, 69500, 69400, 69300, 69200, 69100, 69050, 68950, 68850, 68800, 68700, 68600, 68550, 68450, 68350, 68300, 68200, 68150, 68050, 68000, 67900, 67850, 67750, 67700, 67650, 67550, 67500, 67400, 67350, 67300, 67250, 67150, 67100, 67050, 67000, 66900, 66850, 66800, 66750, 66700, 66600, 66550, 66500, 66450, 66400, 66350, 66300, 66250, 66200, 66150, 66100, 66050, 66000, 65950, 65900, 65850, 65800, 65750, 65700, 65650, 65650, 65600, 65550, 65500, 65450, 65400, 65400, 65350, 65300, 65250, 65250, 65200, 65150, 65100, 65100, 65050, 65000, 65000, 64950, 64900, 64900, 64850, 64800, 64800, 64750, 64750, 64700, 64650, 64650, 64600, 64600, 64550, 64550, 64500, 64500, 64450, 64450, 64400, 64400, 64350, 64350, 64300, 64300, 64300, 64250, 64250, 64200, 64200, 64200, 64150, 64150, 64150, 64100, 64100, 64100, 64050, 64050, 64050, 64000, 64000, 64000, 63950, 63950, 63950, 63950, 63900, 63900, 63900, 63900, 63900, 63850, 63850, 63850, 63850, 63850, 63800, 63800, 63800, 63800, 63800, 63800, 63800, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63700, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63750, 63800, 63800, 63800, 63800, 63800, 63800, 63800, 63850, 63850, 63850, 63850, 63850, 63850, 63900, 63900, 63900, 63900, 63900, 63950, 63950, 63950, 63950, 63950, 64000, 64000, 64000, 64000, 64050, 64050, 64050, 64050, 64100, 64100, 64100, 64150, 64150, 64150, 64150, 64200, 64200, 64200, 64250, 64250, 64250, 64300, 64300, 64300, 64350, 64350, 64350, 64400, 64400, 64400, 64450, 64450, 64450, 64500, 64500, 64550, 64550, 64550, 64600, 64600, 64600, 64650, 64650, 64700, 64700, 64750, 64750, 64750, 64800, 64800, 64850, 64850, 64900, 64900, 64900, 64950, 64950, 65000, 65000, 65050, 65050, 65100, 65100, 65150, 65150, 65200, 65200, 65250, 65250, 65300, 65300, 65350, 65350, 65400, 65400, 65450, 65450, 65500, 65500, 65550, 65550, 65600, 65650, 65650, 65700, 65700, 65750, 65750, 65800, 65800, 65850, 65900, 65900, 65950, 65950, 66000, 66000, 66050, 66100, 66100, 66150, 66150, 66200, 66250, 66250, 66300, 66350, 66350, 66400, 66400, 66450, 66500, 66500, 66550, 66600, 66600, 66650, 66700, 66700, 66750, 66800, 66800, 66850, 66850, 66900, 66950, 67000, 67000, 67050, 67100, 67100, 67150, 67200, 67200, 67250, 67300, 67300, 67350, 67400, 67400, 67450, 67500, 67550, 67550, 67600, 67650, 67700, 67700, 67750, 67800, 67800, 67850, 67900, 67950, 67950, 68000, 68050, 68100, 68100, 68150, 68200, 68250, 68250, 68300, 68350, 68400, 68400, 68450, 68500, 68550, 68600, 68600, 68650, 68700, 68750, 68800, 68800, 68850, 68900, 68950, 69000, 69000, 69050, 69100, 69150, 69200, 69200, 69250, 69300, 69350, 69400, 69400, 69450, 69500, 69550, 69600, 69650, 69650, 69700, 69750, 69800, 69850, 69900, 69950, 69950, 70000, 70050, 70100, 70150, 70200, 70250, 70250, 70300, 70350, 70400, 70450, 70500, 70550, 70550, 70600, 70650, 70700, 70750, 70800, 70850, 70900, 70950, 70950, 71000, 71050, 71100, 71150, 71200, 71250, 71300, 71350, 71400, 71450, 71450, 71500, 71550, 71600, 71650, 71700, 71750, 71800, 71850, 71900, 71950, 72000, 72050, 72050, 72100, 72150, 72200, 72250, 72300, 72350, 72400, 72450, 72500, 72550, 72600, 72650, 72700, 72750, 72800, 72850, 72900, 72950, 73000, 73050, 73100, 73150, 73150, 73200, 73250, 73300, 73350, 73400, 73450, 73500, 73550, 73600, 73650, 73700, 73750, 73800, 73850, 73900, 73950, 74000, 74050, 74100, 74150, 74200, 74250, 74300, 74350, 74400, 74450, 74500, 74550, 74600, 74650, 74700, 74750, 74850, 74900, 74950, 75000, 75050, 75100, 75150, 75200, 75250, 75300, 75350, 75400, 75450, 75500, 75550, 75600, 75650, 75700, 75750, 75800, 75850, 75900, 75950, 76000, 76050, 76150, 76200, 76250, 76300, 76350, 76400, 76450, 76500, 76550, 76600, 76650, 76700, 76750, 76800, 76850, 76950, 77000, 77050, 77100, 77150, 77200, 77250, 77300, 77350, 77400, 77450, 77500, 77600, 77650, 77700, 77750, 77800, 77850, 77900, 77950, 78000, 78050, 78150, 78200, 78250, 78300, 78350, 78400, 78450, 78500, 78550, 78650, 78700, 78750, 78800, 78850, 78900, 78950, 79000, 79100, 79150, 79200, 79250, 79300, 79350, 79400, 79450, 79550, 79600, 79650, 79700, 79750, 79800, 79850, 79950, 80000, 80050, 80100, 80150, 80200, 80250, 80350, 80400, 80450, 80500, 80550, 80600, 80650, 80750, 80800, 80850, 80900, 80950, 81000, 81100, 81150, 81200, 81250, 81300, 81350, 81450, 81500, 81550, 81600, 81650, 81700, 81800, 81850, 81900, 81950, 82000, 82050, 82150, 82200, 82250, 82300, 82350, 82450, 82500, 82550, 82600, 82650, 82700, 82800, 82850, 82900, 82950, 83000, 83100, 83150, 83200, 83250, 83300, 83400, 83450, 83500, 83550, 83600, 83700, 83750, 83800, 83850, 83900, 84000, 84050, 84100, 84150, 84250, 84300, 84350, 84400, 84450, 84550, 84600, 84650, 84700, 84800, 84850, 84900, 84950, 85000, 85100, 85150, 85200, 85250, 85350, 85400, 85450, 85500, 85550, 85650, 85700, 85750, 85800, 85900, 85950, 86000, 86050, 86150, 86200, 86250, 86300, 86400, 86450, 86500, 86550, 86650, 86700, 86750, 86800, 86900, 86950, 87000, 87050, 87150, 87200, 87250, 87300, 87400, 87450, 87500, 87550, 87650, 87700, 87750, 87800, 87900, 87950, 88000, 88050, 88150, 88200, 88250, 88300, 88400, 88450, 88500, 88600, 88650, 88700, 88750, 88850, 88900, 88950, 89000, 89100, 89150, 89200, 89300, 89350, 89400, 89450, 89550, 89600, 89650, 89750, 89800, 89850, 89900, 90000, 90050, 90100, 90200, 90250, 90300, 90350, 90450, 90500, 90550, 90650, 90700, 90750, 90850, 90900, 90950, 91000, 91100, 91150, 91200, 91300, 91350, 91400, 91500, 91550, 91600, 91650, 91750, 91800, 91850, 91950, 92000, 92050, 92150, 92200, 92250, 92350, 92400, 92450, 92550, 92600, 92650, 92700, 92800, 92850, 92900, 93000, 93050, 93100, 93200, 93250, 93300, 93400, 93450, 93500, 93600, 93650, 93700, 93800, 93850, 93900, 94000, 94050, 94100, 94200, 94250, 94300, 94400, 94450, 94500, 94600, 94650, 94700, 94800, 94850, 94900, 95000, 95050, 95100, 95200, 95250, 95300, 95400, 95450, 95500, 95600, 95650, 95700, 95800, 95850, 95900, 96000, 96050, 96100, 96200, 96250, 96350, 96400, 96450, 96550, 96600, 96650, 96750, 96800, 96850, 96950, 97000, 97050, 97150, 97200, 97250, 97350, 97400, 97500, 97550, 97600, 97700, 97750, 97800, 97900, 97950, 98000, 98100, 98150, 98250};


// Now declare the function
bool IsMIP(art::Ptr<recob::Track> track, art::Event &evt);

// other functions used by IsMIP
double GetDqDxTruncatedMean(std::vector<art::Ptr<anab::Calorimetry>> calos);
double GetDqDxTruncatedMean(std::vector<double> dqdx_v);
double GetMedian_dqdx(std::vector<double> dqdx_v);
double GetMean_dqdx(std::vector<double> dqdx_v);
double GetSTD_dqdx(std::vector<double> dqdx_v);

#endif

